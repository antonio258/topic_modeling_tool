from abc import ABC, abstractmethod
from tm_module.utils.reader import Reader


class TopicModeling(ABC):
    """Abstract base class for topic modeling algorithms."""

    @abstractmethod
    def __init__(self, reader: Reader):
        """Initializes the TopicModeling object.

        Args:
            reader (Reader): The reader object used to retrieve data for modeling.
        """
        self.text, self.ids, self.n_documents = reader.get_data_to_model()
        self.matrix = None
        self.vocab = None

    @abstractmethod
    def generate_representation(*args, **kwargs):
        """Generates the representation of the documents.

        Args:
            *args: Variable length argument list.
            **kwargs: Arbitrary keyword arguments.
        """
        pass

    @abstractmethod
    def get_topics(*args, **kwargs):
        """Retrieves the topics generated by the topic modeling algorithm.

        Args:
            *args: Variable length argument list.
            **kwargs: Arbitrary keyword arguments.
        """
        pass